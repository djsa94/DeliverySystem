@model ProyectoProgramado3.Models.PlaceModel

@{
    ViewBag.Title = "Create";
}

    <head>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>

        <script src="https://maps.googleapis.com/maps/api/js?key=&libraries=places&callback=initAutocomplete"
                async defer></script>

        <script src="https://maps.googleapis.com/maps/api/js?key=&libraries=places&callback=search" async defer></script>
    </head>
    <h2>Create</h2>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>PlaceModel</h4>
            <hr />
            <style>
                #locationField, #controls {
            position: relative;
            width: 480px;
          }
          #autocomplete {
            position: absolute;
            top: 0px;
            left: 0px;
            width: 99%;
          }
          .label {
            text-align: right;
            font-weight: bold;
            width: 100px;
            color: #303030;
            font-family: "Roboto";
          }
          #address {
            border: 1px solid #000090;
            background-color: #f0f9ff;
            width: 480px;
            padding-right: 2px;
          }
          #address td {
            font-size: 10pt;
          }
          .field {
            width: 99%;
          }
          .slimField {
            width: 80px;
          }
          .wideField {
            width: 200px;
          }
          #locationField {
            height: 20px;
            margin-bottom: 2px;
          }
            </style>
            <link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.idPlace, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.idPlace, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.idPlace, "", new { @class = "text-danger" })
                </div>
            </div>
        
            <div class="form-group">
                <div class="col-md-10" id="locationField">
                    <input id="autocomplete"
                           placeholder="Enter your address"
                           onFocus="geolocate()"
                           type="text" />
                </div>
            

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", @id = "latitude", @onchange = "onchangeevent();" } })
                    @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control", @id = "longitude", @onchange = "onchangeevent();" } })
                    @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @id = "address", @onchange = "onchangeevent();" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @id = "name", @onchange = "onchangeevent();" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DeliveryMen, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DeliveryMen, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DeliveryMen, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PlaceType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlaceType, new { htmlAttributes = new { @class = "form-control", @id = "placeType", @onchange = "onchangeevent();" } })
                    @Html.ValidationMessageFor(model => model.PlaceType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Picture, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Picture, new { htmlAttributes = new { @class = "form-control", @id = "picture", @onchange = "onchangeevent();" } })
                    @Html.ValidationMessageFor(model => model.Picture, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", @id="phoneNumber", @onchange = "onchangeevent();"  } })
                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "form-control", @id = "rating", @onchange = "onchangeevent();" } })
                    @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Schedule, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Schedule, new { htmlAttributes = new { @class = "form-control", @id = "schedule", @onchange = "onchangeevent();" } })
                    @Html.ValidationMessageFor(model => model.Schedule, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" id="websiteTag">
                    @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control", @id="website", @onchange = "onchangeevent();" } })
                    @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
            <input type="button" value="Search By Coordinates", onclick="search()">
        </div>
        <script>
    var autocomplete, geocoder;
    var map;
    var service;
    var infowindow;
    function geolocate() {
                autocomplete =  new google.maps.places.Autocomplete(
                    (document.getElementById('autocomplete')), {
                        types: ['establishment']
                    });
        autocomplete.setFields(['geometry', 'opening_hours', 'photos', 'rating', 'international_phone_number', 'website', 'name']);
        autocomplete.addListener('place_changed', fillInAddress);
    }
    function fillInAddress() {
        var place = autocomplete.getPlace();
        alert(place.photos[1].GetType());

        $('#latitude').val(place.geometry.location.lat);
        $('#longitude').val(place.geometry.location.lng);
        $('#address').val(place.formatted_address);
        $('#name').val(place.name);
        $('#placeType').val(place.types[0]);
        $('#picture').val(place.photos[0].raw_reference.fife_url);
        $('#phoneNumber').val(place.international_phone_number);
        $('#rating').val(place.rating);
        $('#schedule').val(place.opening_hours.weekday_text);
        $('#website').val(place.website);
    }
    function search() {
        var url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=" + $('#latitude').val() + "," + $('#longitude').val() + "&radius=1500&type=establishment&key=";
        var pyrmont = new google.maps.LatLng($('#latitude').val(),$('#longitude').val());

          map = new google.maps.Map(document.getElementById('map'), {
              center: pyrmont,
              zoom: 15
            });

          var request = {
            location: pyrmont,
            radius: '500',
            type: ['restaurant']
          };

          service = new google.maps.places.PlacesService(map);
          service.nearbySearch(request, callback);
        //var pyrmont = new google.maps.LatLng(parseFloat($('#latitude').val()), parseFloat($('#longitude').val()));
        //var request = {
        //            location: pyrmont,
        //            radius: 1500,
        //            types: ["establishment"]
        //};
        //var service = new google.maps.places.PlacesService();
        //service.nearbySearch(request, callback);
    }
    function callback(results, status)
    {
        if (status == google.maps.places.PlacesServiceStatus.OK)
        {
            alert(results[0])
        }
    }
            
            geolocate();
        </script>

    }
    

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }

